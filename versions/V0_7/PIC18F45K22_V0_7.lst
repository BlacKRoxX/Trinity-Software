CCS PCH C Compiler, Version 4.114, 93506184               12-Apr-13 11:08

               Filename: D:\GitHub\Trinity-Software\versions\V0_7\PIC18F45K22_V0_7.lst

               ROM used: 2224 bytes (7%)
                         Largest free fragment is 30540
               RAM used: 59 (4%) at main() level
                         74 (5%) worst case
               Stack:    7 worst case (3 in main + 4 for interrupts)

*
0000:  GOTO   0692
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   01BA
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... //******************************************************************************* 
.................... //*       Programmname: Trinity          DOS Name:trinity2_00_45K22.c             *    
.................... //*       Release: 1.1                   Datum: 21.12.2011                        * 
.................... //*       Org. Autor: STRI               Firma: HTL                              * 
.................... //*       Bearb. Autor: PITD             Firma: HTL                              * 
.................... //******************************************************************************* 
.................... // 
.................... //******************************************************************************* 
.................... //*  Bemerkungen:                                                                 * 
.................... //*  Compiler Release: MPLAB 8.73 CCS Compiler PCH (PCM und PCB 4.127)            * 
.................... //*                                                                               * 
.................... //******************************************************************************* 
.................... //******************************************************************************* 
.................... //*      Pinbelegung:                                                * 
.................... //*      RA0 = AN0 Analogeingang 0 VU links                               * 
.................... //*      RA1 = AN1 Analogeingang 1 VU recht                               * 
.................... //*      RA2 = AN2 Analogeingang 2 Bass                                  * 
.................... //*      RA3 = AN3 Analogeingang 3 Mitten                               * 
.................... //*      RA4 = CS\ PCM2705                                           * 
.................... //*      RA5 = AN4 Analogeingang 4 Höhen                                 * 
.................... //*      RA6 = NC                                                * 
.................... //*      RA7 = SSPND\ Powerdown für Audio                               * 
.................... //*      RB0 = SCLK SPI Clock PCM 2705                                  * 
.................... //*      RB1 = MOSI SPI Daten                                        * 
.................... //*      RB2 = Taste - activ low                                       * 
.................... //*      RB3 = Taste + active low                                     * 
.................... //*      RB4 = Taste Down activ low                                     * 
.................... //*      RB5 = Taste Up activ low                                     * 
.................... //*      RB6 = Taste OK activ low (nicht verwendet) & Programm Clock PGC          * 
.................... //*      RB7 = Taste Enter activ low (nicht verwendet) & Programm Data PGD       * 
.................... //*      RC0 = VR0 VU Meter rechts unterste LED                            * 
.................... //*      RC1 = VR1 VU Meter rechts                                      * 
.................... //*      RC2 = VR2 VU Meter rechts                                      * 
.................... //*      RC3 = VR3 VU Meter rechts                                      * 
.................... //*      RC4 = VL7 VU Meter rechts oberste LED                           * 
.................... //*      RC5 = VL6 VU Meter rechts                                      * 
.................... //*      RC6 = VL5 VU Meter rechts                                      * 
.................... //*      RC7 = VL4 VU Meter rechts                                      * 
.................... //*      RD0 = VR4 VU Meter links                                     * 
.................... //*      RD1 = VR5 VU Meter links                                     * 
.................... //*      RD2 = VR6 VU Meter links                                     * 
.................... //*      RD3 = VR7 VU Meter links oberste LED                            * 
.................... //*      RD4 = VL3 VU Meter links                                     * 
.................... //*      RD5 = VL2 VU Meter links                                     * 
.................... //*      RD6 = VL1 VU Meter links                                     * 
.................... //*      RD7 = VL0 VU Meter links unterste LED                            * 
.................... //*      RE0 = LED Bass                                              * 
.................... //*      RE1 = LED Mitten                                           * 
.................... //*      RE2 = LED Höhen                                              * 
.................... //******************************************************************************* 
.................... // 
....................  
.................... //############################################################################### 
.................... //#                                                                               # 
.................... //# Diese Mustervorlage soll unverändert unter dem Namen: Muster.c bleiben        # 
.................... //# Erstellt für PIC 18FF45Kxx                                 STRASSER  2011.    # 
.................... //# Verwendeter Schriftfont: Courier New, Fett, 8-14, Textmode CCS Standard       # 
.................... //# Tabstops 4, Nicht mit Leerzeichen auffüllen, Auto intend on                   # 
.................... //# PIC REGISTER in Großbuchstaben z.B: GIE                                       # 
.................... //# Variablen groß / klein z.B: int Count_B (B=Byte(8),L(16),D(32),F,C(8),b(1))   # 
.................... //# Konstante groß / klein z.B: const int Delay1_K = 255; oder:                 # 
.................... //#   define Delay1_K 55 (Dezimal, 0x37 Hex,055 Octal).                              # 
.................... //#   Ausnahme: Maschinenkonstante: TRIS_INIT, OPTION_INIT                          # 
.................... //# Befehle immmer klein z.B:  for (Count_B=1;Count_B=DELAY;Count_B++)            # 
.................... //# Unterscheidung bit und Byte durch _b bzw. _B am Ende                          # 
.................... //# I/O groß, Portdefinitionen durch _p bzw. _P (p..Pin, P..Port) am Ende         # 
.................... //#   z.B: LED_p, SENSOR_p, SEGMENT_P                                           # 
.................... //# Labels immer Groß & klein, ohne Einrücken am Anfang, allein in einer Zeile    # 
.................... //#                                                                               # 
.................... //############################################################################### 
.................... // 
.................... //                    ** Grunddefinitionen Include Dateien**                                                                     
.................... #include    <18F45K22.h>             // Zuordnung Prozessorregister 
.................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
.................... #device PIC18F45K22 
.................... #list 
....................  
.................... //#device    ICD=TRUE               // ICD2 Implementation 
.................... #device    adc=10                  // A/D Wandler auf 10 Bit 
.................... #case                            // Compiler ist Case sensitive  
.................... #use       fast_io(a)               // TRIS Register wird selbst 
.................... #use       fast_io(b)                // gesetzt 
.................... #use      fast_io(c)               //  
.................... #use      fast_io(d)               //  
.................... #use      fast_io(e)               //  
.................... #fuses       NOPROTECT,NOWDT,NOBROWNOUT,PUT,INTRC_IO,NOLVP,NOMCLR,NOPBADEN,NOPLLEN 
.................... #use       delay (clock=8000000)      // Verzögerungsroutinen (notwendig f. RS232) 
*
00AE:  CLRF   FEA
00B0:  MOVLW  49
00B2:  MOVWF  FE9
00B4:  MOVF   FEF,W
00B6:  BZ    00D2
00B8:  MOVLW  02
00BA:  MOVWF  01
00BC:  CLRF   00
00BE:  DECFSZ 00,F
00C0:  BRA    00BE
00C2:  DECFSZ 01,F
00C4:  BRA    00BC
00C6:  MOVLW  97
00C8:  MOVWF  00
00CA:  DECFSZ 00,F
00CC:  BRA    00CA
00CE:  DECFSZ FEF,F
00D0:  BRA    00B8
00D2:  RETLW  00
....................  
.................... //                        ** Datenrichtung ** 
.................... #define         TRISA_INIT      0b10101111    // Datenrichtung Register RA 
.................... #define         TRISB_INIT      0b11111100    // Datenrichtung Register RB 
.................... #define         TRISC_INIT      0b00000000   // Datenregister Register RC 
.................... #define         TRISD_INIT      0b00000000   // 
.................... #define         TRISE_INIT      0b00000000   // 
....................  
.................... //                              ** Konstantendefinitionen ** 
.................... const int Zimax_K =            10;         // maximale Anzahl Ziffernvorrat 
.................... const long Timerstartwert_K =   100;       // Timer wird auf 10ms eingestellt 
.................... const int Preload_K   =         5;         // Korrekturwert für Prescaler 
....................  
....................                                
.................... //                        ** Datentabellen ** 
....................  
....................     
.................... //                        ** Variablendefinition ** 
....................  
.................... short      Dimm_b =    0;            // Flag für Analogumschaltung RA0/1 
....................  
.................... int          
....................          Hsec_B =         0, 
....................          Sec_B =            0, 
....................          Min_B =            0, 
....................          Hour_B =         0, 
....................          Presc_B =         Preload_K, 
....................          Cout_B =         0, 
....................          Dout_B =         0, 
....................          Down_B =         0,      // Wird im Interrupt decrementiert 
....................          SPIActive =     0; 
.................... long      Ana_L =            0; 
....................  
.................... //                  ** Arraydefinitionen ** 
.................... long   Adc_L [5];                  
.................... int muteRdy = 0; 
.................... int pauseRdy = 0; 
.................... //                        ** Portdefinitionen ** 
.................... #define      Vul_p             PIN_A0      // Eingang Aussteuerung links 
.................... #define      Vur_p             PIN_A1      // Eingang Aussteuerung rechts 
.................... #define      Bass_p            PIN_A2      // Eingang Bass 
.................... #define      Mid_p             PIN_A3      // Eingang Mitten 
.................... #define      Treble_p          PIN_A5      // Eingang Höhen 
.................... #define      Cs_p              PIN_A4      // Chipselect PCM2705 
.................... #define      Sspnd_p           PIN_A7      // Powerdown low aktiv 
.................... #define      Sclk_p            PIN_B0      // Serielle Clock 
.................... #define      Mosi_p            PIN_B1      // Serielle Daten 
.................... #define      Minus_p           PIN_B2      // Taste Minus 
.................... #define      Plus_p            PIN_B3      // Taste Plus 
.................... #define      Down_p            PIN_B4      // Taste Down 
.................... #define      Up_p              PIN_B5      // Taste Up 
.................... #define      Ledb_p            PIN_E0      // Bass LED 
.................... #define      Ledm_p            PIN_E1      // Mid LED 
.................... #define      Ledt_p            PIN_E2      // Treble LED 
....................  
....................  
.................... //                    ** Funktionsprototypen ** 
....................  
.................... void checkKeys(); 
....................  
....................  
.................... //                        ** Globale Includedateien mit Port IO ** 
....................  
....................  
....................  
.................... //                        ** Interrupts ** 
.................... #INT_TIMER0 
.................... void timer0_int() 
.................... { 
....................    set_timer0 (Timerstartwert_K);          // Timer0 Interr. alle 1/100 sek 
*
01BA:  CLRF   FD7
01BC:  MOVLW  64
01BE:  MOVWF  FD6
....................    --Down_B;  
01C0:  DECF   22,F
....................    if (-- Presc_B == 0) 
01C2:  DECFSZ 1F,F
01C4:  BRA    01F8
....................    { 
....................       Presc_B = Preload_K; 
01C6:  MOVLW  05
01C8:  MOVWF  1F
....................       if (++Hsec_B == 100) 
01CA:  INCF   1B,F
01CC:  MOVF   1B,W
01CE:  SUBLW  64
01D0:  BNZ   01F2
....................       { 
....................          Hsec_B = 0; 
01D2:  CLRF   1B
....................         
....................          if (++Sec_B == 60) 
01D4:  INCF   1C,F
01D6:  MOVF   1C,W
01D8:  SUBLW  3C
01DA:  BNZ   01F2
....................          { 
....................             Sec_B = 0; 
01DC:  CLRF   1C
....................             if (++Min_B == 60) 
01DE:  INCF   1D,F
01E0:  MOVF   1D,W
01E2:  SUBLW  3C
01E4:  BNZ   01F2
....................             { 
....................                Min_B = 0; 
01E6:  CLRF   1D
....................                if (++Hour_B == 24) 
01E8:  INCF   1E,F
01EA:  MOVF   1E,W
01EC:  SUBLW  18
01EE:  BNZ   01F2
....................                { 
....................                   Hour_B = 0; 
01F0:  CLRF   1E
....................                } 
....................             } 
....................          } 
....................       } 
....................       if(SPIActive == 0){ 
01F2:  MOVF   23,F
01F4:  BNZ   01F8
....................          checkKeys(); 
01F6:  BRA    0138
....................       } 
....................    } 
.................... } 
....................  
.................... //                        ** Functions ** 
....................  
01F8:  BCF    FF2.2
01FA:  GOTO   0060
.................... void Portout (int Li_B,int Re_B) 
.................... { 
*
030A:  CLRF   42
....................    int Out_B = 0, I_B; 
....................     
....................    for(I_B=0;I_B <=3;++I_B) Out_B  |= bit_test (Li_B,(3-I_B)) << I_B; // Bit0-3 auf 7-4 
030C:  CLRF   43
030E:  MOVF   43,W
0310:  SUBLW  03
0312:  BNC   034C
0314:  MOVLW  03
0316:  BSF    FD8.0
0318:  SUBFWB 43,W
031A:  MOVWF  44
031C:  MOVFF  40,00
0320:  MOVF   44,W
0322:  MOVWF  01
0324:  BZ    032E
0326:  BCF    FD8.0
0328:  RRCF   00,F
032A:  DECFSZ 01,F
032C:  BRA    0326
032E:  MOVLW  00
0330:  BTFSC  00.0
0332:  MOVLW  01
0334:  MOVWF  00
0336:  MOVF   43,W
0338:  MOVWF  01
033A:  BZ    0344
033C:  BCF    FD8.0
033E:  RLCF   00,F
0340:  DECFSZ 01,F
0342:  BRA    033C
0344:  MOVF   00,W
0346:  IORWF  42,F
0348:  INCF   43,F
034A:  BRA    030E
....................    swap (Out_B); 
034C:  SWAPF  42,F
....................    swap (Re_B); 
034E:  SWAPF  41,F
....................    for(I_B=0;I_B <=3;++I_B) Out_B  |= bit_test (Re_B,(I_B)) << I_B; 
0350:  CLRF   43
0352:  MOVF   43,W
0354:  SUBLW  03
0356:  BNC   0388
0358:  MOVFF  41,00
035C:  MOVF   43,W
035E:  MOVWF  01
0360:  BZ    036A
0362:  BCF    FD8.0
0364:  RRCF   00,F
0366:  DECFSZ 01,F
0368:  BRA    0362
036A:  MOVLW  00
036C:  BTFSC  00.0
036E:  MOVLW  01
0370:  MOVWF  00
0372:  MOVF   43,W
0374:  MOVWF  01
0376:  BZ    0380
0378:  BCF    FD8.0
037A:  RLCF   00,F
037C:  DECFSZ 01,F
037E:  BRA    0378
0380:  MOVF   00,W
0382:  IORWF  42,F
0384:  INCF   43,F
0386:  BRA    0352
....................    Out_B ^= 255; 
0388:  MOVLW  FF
038A:  XORWF  42,F
....................    output_d (Out_B); 
038C:  MOVFF  42,F8C
....................    Out_B = 0; 
0390:  CLRF   42
....................    swap (Li_B); 
0392:  SWAPF  40,F
....................    for(I_B=0;I_B <=3;++I_B) Out_B  |= bit_test (Li_B,(3-I_B)) << I_B; 
0394:  CLRF   43
0396:  MOVF   43,W
0398:  SUBLW  03
039A:  BNC   03D4
039C:  MOVLW  03
039E:  BSF    FD8.0
03A0:  SUBFWB 43,W
03A2:  MOVWF  44
03A4:  MOVFF  40,00
03A8:  MOVF   44,W
03AA:  MOVWF  01
03AC:  BZ    03B6
03AE:  BCF    FD8.0
03B0:  RRCF   00,F
03B2:  DECFSZ 01,F
03B4:  BRA    03AE
03B6:  MOVLW  00
03B8:  BTFSC  00.0
03BA:  MOVLW  01
03BC:  MOVWF  00
03BE:  MOVF   43,W
03C0:  MOVWF  01
03C2:  BZ    03CC
03C4:  BCF    FD8.0
03C6:  RLCF   00,F
03C8:  DECFSZ 01,F
03CA:  BRA    03C4
03CC:  MOVF   00,W
03CE:  IORWF  42,F
03D0:  INCF   43,F
03D2:  BRA    0396
....................    swap (Out_B); 
03D4:  SWAPF  42,F
....................    swap (Re_B); 
03D6:  SWAPF  41,F
....................    for(I_B=0;I_B <=3;++I_B) Out_B  |= bit_test (Re_B,(I_B)) << I_B; 
03D8:  CLRF   43
03DA:  MOVF   43,W
03DC:  SUBLW  03
03DE:  BNC   0410
03E0:  MOVFF  41,00
03E4:  MOVF   43,W
03E6:  MOVWF  01
03E8:  BZ    03F2
03EA:  BCF    FD8.0
03EC:  RRCF   00,F
03EE:  DECFSZ 01,F
03F0:  BRA    03EA
03F2:  MOVLW  00
03F4:  BTFSC  00.0
03F6:  MOVLW  01
03F8:  MOVWF  00
03FA:  MOVF   43,W
03FC:  MOVWF  01
03FE:  BZ    0408
0400:  BCF    FD8.0
0402:  RLCF   00,F
0404:  DECFSZ 01,F
0406:  BRA    0400
0408:  MOVF   00,W
040A:  IORWF  42,F
040C:  INCF   43,F
040E:  BRA    03DA
....................    Out_B ^= 255; 
0410:  MOVLW  FF
0412:  XORWF  42,F
....................    output_c (Out_B); 
0414:  MOVFF  42,F8B
.................... } 
0418:  RETLW  00
....................  
.................... int Makevu (long Ana_L) 
.................... { 
....................    int I_B; 
....................     
....................    if (Ana_L >400)   I_B = 255; 
*
027C:  MOVF   3A,W
027E:  SUBLW  00
0280:  BC    0292
0282:  XORLW  FF
0284:  BNZ   028C
0286:  MOVF   39,W
0288:  SUBLW  90
028A:  BC    0292
028C:  MOVLW  FF
028E:  MOVWF  3B
....................    else if (Ana_L >220)I_B = 127; 
0290:  BRA    0304
0292:  MOVF   3A,F
0294:  BNZ   029C
0296:  MOVF   39,W
0298:  SUBLW  DC
029A:  BC    02A2
029C:  MOVLW  7F
029E:  MOVWF  3B
....................    else if (Ana_L >140)I_B = 63; 
02A0:  BRA    0304
02A2:  MOVF   3A,F
02A4:  BNZ   02AC
02A6:  MOVF   39,W
02A8:  SUBLW  8C
02AA:  BC    02B2
02AC:  MOVLW  3F
02AE:  MOVWF  3B
....................    else if (Ana_L >80)I_B = 31; 
02B0:  BRA    0304
02B2:  MOVF   3A,F
02B4:  BNZ   02BC
02B6:  MOVF   39,W
02B8:  SUBLW  50
02BA:  BC    02C2
02BC:  MOVLW  1F
02BE:  MOVWF  3B
....................    else if (Ana_L >40)I_B = 15; 
02C0:  BRA    0304
02C2:  MOVF   3A,F
02C4:  BNZ   02CC
02C6:  MOVF   39,W
02C8:  SUBLW  28
02CA:  BC    02D2
02CC:  MOVLW  0F
02CE:  MOVWF  3B
....................    else if (Ana_L >20)I_B = 7; 
02D0:  BRA    0304
02D2:  MOVF   3A,F
02D4:  BNZ   02DC
02D6:  MOVF   39,W
02D8:  SUBLW  14
02DA:  BC    02E2
02DC:  MOVLW  07
02DE:  MOVWF  3B
....................    else if (Ana_L >12)I_B = 3; 
02E0:  BRA    0304
02E2:  MOVF   3A,F
02E4:  BNZ   02EC
02E6:  MOVF   39,W
02E8:  SUBLW  0C
02EA:  BC    02F2
02EC:  MOVLW  03
02EE:  MOVWF  3B
....................    else if (Ana_L >8)I_B = 1; 
02F0:  BRA    0304
02F2:  MOVF   3A,F
02F4:  BNZ   02FC
02F6:  MOVF   39,W
02F8:  SUBLW  08
02FA:  BC    0302
02FC:  MOVLW  01
02FE:  MOVWF  3B
....................    else I_B=0; 
0300:  BRA    0304
0302:  CLRF   3B
....................    return (I_B); 
0304:  MOVFF  3B,01
.................... } 
0308:  RETLW  00
....................  
.................... void SendSPI(int16 Data) 
.................... { 
....................    output_low(Sclk_p); 
*
00D4:  BCF    F8A.0
....................    output_low(Cs_p); 
00D6:  BCF    F89.4
....................    delay_ms (1); 
00D8:  MOVLW  01
00DA:  MOVWF  49
00DC:  RCALL  00AE
....................     
....................    int i,u; 
....................     
....................    for (i=16; i>0; i--) 
00DE:  MOVLW  10
00E0:  MOVWF  47
00E2:  MOVF   47,F
00E4:  BZ    012C
....................    {   // msb first 
....................       u=i-1; 
00E6:  MOVLW  01
00E8:  SUBWF  47,W
00EA:  MOVWF  48
....................       output_low(Sclk_p); 
00EC:  BCF    F8A.0
....................       delay_ms (1); 
00EE:  MOVLW  01
00F0:  MOVWF  49
00F2:  RCALL  00AE
....................       (Data & (1<<u)) ? (output_high(Mosi_p)) : (output_low(Mosi_p)); 
00F4:  MOVLW  01
00F6:  MOVWF  00
00F8:  MOVF   48,W
00FA:  MOVWF  01
00FC:  BZ    0106
00FE:  BCF    FD8.0
0100:  RLCF   00,F
0102:  DECFSZ 01,F
0104:  BRA    00FE
0106:  MOVF   00,W
0108:  ANDWF  45,W
010A:  MOVWF  00
010C:  CLRF   03
010E:  MOVF   00,W
0110:  IORWF  03,W
0112:  BZ    0118
0114:  BSF    F8A.1
0116:  BRA    011A
0118:  BCF    F8A.1
....................       delay_ms (1); 
011A:  MOVLW  01
011C:  MOVWF  49
011E:  RCALL  00AE
....................       output_high(Sclk_p); 
0120:  BSF    F8A.0
....................       delay_ms (1); 
0122:  MOVLW  01
0124:  MOVWF  49
0126:  RCALL  00AE
....................    } 
0128:  DECF   47,F
012A:  BRA    00E2
....................     
....................    output_high(Mosi_p); 
012C:  BSF    F8A.1
....................    delay_ms (10); 
012E:  MOVLW  0A
0130:  MOVWF  49
0132:  RCALL  00AE
....................    output_high(Cs_p); 
0134:  BSF    F89.4
....................    return; 
.................... } 
0136:  RETLW  00
....................  
....................  
.................... //                        ** Grundinitialisierung ** 
.................... void coldstart ()  
.................... {    
....................     setup_adc_ports(sAN0|sAN1|sAN2|sAN3|sAN4|VSS_VDD); 
*
01FE:  MOVF   FC1,W
0200:  ANDLW  F0
0202:  MOVWF  FC1
0204:  MOVLW  2F
0206:  MOVLB  F
0208:  MOVWF  x38
020A:  MOVLW  00
020C:  MOVWF  x3C
020E:  MOVWF  x39
0210:  MOVWF  x3A
0212:  MOVWF  x3B
....................    setup_adc(ADC_CLOCK_INTERNAL|ADC_TAD_MUL_0); 
0214:  MOVF   FC0,W
0216:  ANDLW  C0
0218:  IORLW  07
021A:  MOVWF  FC0
021C:  BSF    FC0.7
021E:  BSF    FC2.0
....................    setup_oscillator(OSC_8MHZ|OSC_INTRC); 
0220:  MOVLW  62
0222:  MOVWF  FD3
0224:  MOVF   FD3,W
....................    setup_comparator(NC_NC_NC_NC); 
0226:  MOVLW  04
0228:  MOVWF  F78
022A:  MOVWF  F79
....................    output_a (0b00001000); 
022C:  MOVLW  08
022E:  MOVWF  F89
....................    output_b (0); 
0230:  CLRF   F8A
....................    output_c (0); 
0232:  CLRF   F8B
....................    output_d (0); 
0234:  CLRF   F8C
....................    output_e (0); 
0236:  CLRF   F8D
....................    set_tris_a (TRISA_INIT);               // Datenrichtung Port A 
0238:  MOVLW  AF
023A:  MOVWF  F92
....................    set_tris_b (TRISB_INIT);               // Datenrichtung Port B 
023C:  MOVLW  FC
023E:  MOVWF  F93
....................    set_tris_c (TRISC_INIT); 
0240:  MOVLW  00
0242:  MOVWF  F94
....................    set_tris_d (TRISD_INIT); 
0244:  MOVWF  F95
....................    set_tris_e (TRISE_INIT); 
0246:  BCF    F96.0
0248:  BCF    F96.1
024A:  BCF    F96.2
024C:  BCF    F96.3
....................    port_b_pullups(TRUE); 
024E:  MOVLW  01
0250:  MOVWF  F7C
0252:  BCF    FF1.7
....................     setup_timer_0(RTCC_INTERNAL|RTCC_DIV_32|RTCC_8_BIT); 
0254:  MOVLW  C4
0256:  MOVWF  FD5
....................                                     // Timer0 intern, Takt 20.00/4/64 = 78.125 KHz 
....................                                        // Interrupt alle 256/15.625 = 3.2768 ms (305Hz) 
....................                                        // Korrekturwert für 10 ms: 156 Timerclicks 
....................                                        // -> Timer wird auf 256-156=100 vorgestellt  
....................       set_timer0 (Timerstartwert_K);            // Timerwert auf Startwert setzen 
0258:  CLRF   FD7
025A:  MOVLW  64
025C:  MOVWF  FD6
....................       enable_interrupts(INT_TIMER0); 
025E:  BSF    FF2.5
....................    setup_timer_1(T1_DISABLED);               // Nur Timer0 Interrupt 
0260:  CLRF   FCD
0262:  CLRF   FCC
0264:  CLRF   19
0266:  BTFSC  FF2.7
0268:  BSF    19.7
026A:  BCF    FF2.7
....................    delay_ms (200); 
026C:  MOVLW  C8
026E:  MOVWF  49
0270:  MOVLB  0
0272:  RCALL  00AE
0274:  BTFSC  19.7
0276:  BSF    FF2.7
.................... } 
0278:  GOTO   06EA (RETURN)
....................  
.................... void LEDTest3() 
.................... { 
....................    int I_B, li, re; 
....................     
....................    for(I_B = 0; I_B < 2; I_B++){ 
*
051E:  CLRF   3A
0520:  MOVF   3A,W
0522:  SUBLW  01
0524:  BNC   05A4
....................       output_low (Ledb_p); 
0526:  BCF    F8D.0
....................       output_high (Ledm_p); 
0528:  BSF    F8D.1
....................       output_low (Ledt_p); 
052A:  BCF    F8D.2
....................        
....................       li = 1; 
052C:  MOVLW  01
052E:  MOVWF  3B
....................       re = 1; 
0530:  MOVWF  3C
....................        
....................       for (I_B = 0; I_B < 8; I_B++){ 
0532:  CLRF   3A
0534:  MOVF   3A,W
0536:  SUBLW  07
0538:  BNC   056A
....................          Portout(li, re); 
053A:  MOVFF  3B,40
053E:  MOVFF  3C,41
0542:  RCALL  030A
0544:  CLRF   19
0546:  BTFSC  FF2.7
0548:  BSF    19.7
054A:  BCF    FF2.7
....................          delay_ms (200); 
054C:  MOVLW  C8
054E:  MOVWF  49
0550:  RCALL  00AE
0552:  BTFSC  19.7
0554:  BSF    FF2.7
....................          li = (li * 2) + 1 ; 
0556:  BCF    FD8.0
0558:  RLCF   3B,W
055A:  ADDLW  01
055C:  MOVWF  3B
....................          re = (re * 2) + 1 ; 
055E:  BCF    FD8.0
0560:  RLCF   3C,W
0562:  ADDLW  01
0564:  MOVWF  3C
....................       } 
0566:  INCF   3A,F
0568:  BRA    0534
....................        
....................       output_high (Ledb_p); 
056A:  BSF    F8D.0
....................       output_low (Ledm_p); 
056C:  BCF    F8D.1
....................       output_high (Ledt_p); 
056E:  BSF    F8D.2
....................        
....................        
....................       for (I_B = 0; I_B < 8; I_B++){ 
0570:  CLRF   3A
0572:  MOVF   3A,W
0574:  SUBLW  07
0576:  BNC   05A0
....................          Portout(li, re); 
0578:  MOVFF  3B,40
057C:  MOVFF  3C,41
0580:  RCALL  030A
0582:  CLRF   19
0584:  BTFSC  FF2.7
0586:  BSF    19.7
0588:  BCF    FF2.7
....................          delay_ms (200); 
058A:  MOVLW  C8
058C:  MOVWF  49
058E:  RCALL  00AE
0590:  BTFSC  19.7
0592:  BSF    FF2.7
....................          li = (int)(li / 2); 
0594:  BCF    FD8.0
0596:  RRCF   3B,F
....................          re = (int)(re / 2); 
0598:  BCF    FD8.0
059A:  RRCF   3C,F
....................       } 
059C:  INCF   3A,F
059E:  BRA    0572
....................     
....................    }     
05A0:  INCF   3A,F
05A2:  BRA    0520
.................... } 
05A4:  GOTO   068E (RETURN)
....................  
.................... void LEDTest6() 
.................... { 
....................    int I_B, top, bottom, teiler; 
....................    top = 128; 
*
0442:  MOVLW  80
0444:  MOVWF  3B
....................    bottom = 1; 
0446:  MOVLW  01
0448:  MOVWF  3C
....................    teiler = 2; 
044A:  MOVLW  02
044C:  MOVWF  3D
....................  
....................    output_high (Ledb_p); 
044E:  BSF    F8D.0
....................    output_high (Ledm_p); 
0450:  BSF    F8D.1
....................    output_high (Ledt_p); 
0452:  BSF    F8D.2
....................     
....................    for (I_B = 0; I_B < 4; I_B++) 
0454:  CLRF   3A
0456:  MOVF   3A,W
0458:  SUBLW  03
045A:  BNC   04A4
....................    { 
....................       Portout(top+bottom, top+bottom); 
045C:  MOVF   3C,W
045E:  ADDWF  3B,W
0460:  MOVWF  3E
0462:  MOVF   3C,W
0464:  ADDWF  3B,W
0466:  MOVWF  3F
0468:  MOVFF  3E,40
046C:  MOVWF  41
046E:  RCALL  030A
....................  
....................       top = top + top/teiler; 
0470:  MOVFF  3B,3F
0474:  MOVFF  3D,40
0478:  RCALL  041A
047A:  MOVF   01,W
047C:  ADDWF  3B,F
....................       bottom = bottom*2 + 1; 
047E:  BCF    FD8.0
0480:  RLCF   3C,W
0482:  ADDLW  01
0484:  MOVWF  3C
....................       teiler = teiler*2 + 2; 
0486:  BCF    FD8.0
0488:  RLCF   3D,W
048A:  ADDLW  02
048C:  MOVWF  3D
048E:  CLRF   19
0490:  BTFSC  FF2.7
0492:  BSF    19.7
0494:  BCF    FF2.7
....................        
....................       delay_ms(250); 
0496:  MOVLW  FA
0498:  MOVWF  49
049A:  RCALL  00AE
049C:  BTFSC  19.7
049E:  BSF    FF2.7
....................    } 
04A0:  INCF   3A,F
04A2:  BRA    0456
....................    for (I_B = 0; I_B < 3; I_B++) 
04A4:  CLRF   3A
04A6:  MOVF   3A,W
04A8:  SUBLW  02
04AA:  BNC   04E0
....................    { 
....................          output_low (Ledb_p); 
04AC:  BCF    F8D.0
....................          output_low (Ledm_p); 
04AE:  BCF    F8D.1
....................          output_low (Ledt_p); 
04B0:  BCF    F8D.2
04B2:  CLRF   19
04B4:  BTFSC  FF2.7
04B6:  BSF    19.7
04B8:  BCF    FF2.7
....................           
....................          delay_ms(150); 
04BA:  MOVLW  96
04BC:  MOVWF  49
04BE:  RCALL  00AE
04C0:  BTFSC  19.7
04C2:  BSF    FF2.7
....................           
....................          output_high (Ledb_p); 
04C4:  BSF    F8D.0
....................          output_high (Ledm_p); 
04C6:  BSF    F8D.1
....................          output_high (Ledt_p); 
04C8:  BSF    F8D.2
04CA:  CLRF   19
04CC:  BTFSC  FF2.7
04CE:  BSF    19.7
04D0:  BCF    FF2.7
....................           
....................          delay_ms(150); 
04D2:  MOVLW  96
04D4:  MOVWF  49
04D6:  RCALL  00AE
04D8:  BTFSC  19.7
04DA:  BSF    FF2.7
....................    } 
04DC:  INCF   3A,F
04DE:  BRA    04A6
....................    for (I_B = 0; I_B < 4; I_B++) 
04E0:  CLRF   3A
04E2:  MOVF   3A,W
04E4:  SUBLW  03
04E6:  BNC   051A
....................    { 
....................       top = top*2; 
04E8:  BCF    FD8.0
04EA:  RLCF   3B,F
....................       bottom = bottom/2;       
04EC:  BCF    FD8.0
04EE:  RRCF   3C,F
....................        
....................       Portout(top+bottom, top+bottom); 
04F0:  MOVF   3C,W
04F2:  ADDWF  3B,W
04F4:  MOVWF  3E
04F6:  MOVF   3C,W
04F8:  ADDWF  3B,W
04FA:  MOVWF  3F
04FC:  MOVFF  3E,40
0500:  MOVWF  41
0502:  RCALL  030A
0504:  CLRF   19
0506:  BTFSC  FF2.7
0508:  BSF    19.7
050A:  BCF    FF2.7
....................       delay_ms(250); 
050C:  MOVLW  FA
050E:  MOVWF  49
0510:  RCALL  00AE
0512:  BTFSC  19.7
0514:  BSF    FF2.7
....................    } 
0516:  INCF   3A,F
0518:  BRA    04E2
.................... } 
051A:  GOTO   068E (RETURN)
.................... void LEDTest7() 
.................... { 
....................    int I_B, I_B2, li, re, teiler; 
....................    li = 1; 
*
05A8:  MOVLW  01
05AA:  MOVWF  3C
....................    re = 128; 
05AC:  MOVLW  80
05AE:  MOVWF  3D
....................    teiler = 2; 
05B0:  MOVLW  02
05B2:  MOVWF  3E
....................     
....................    output_high (Ledb_p); 
05B4:  BSF    F8D.0
....................    output_low (Ledm_p); 
05B6:  BCF    F8D.1
....................    output_high (Ledt_p);    
05B8:  BSF    F8D.2
....................     
....................    for (I_B2 = 0; I_B2 < 2; I_B2++) 
05BA:  CLRF   3B
05BC:  MOVF   3B,W
05BE:  SUBLW  01
05C0:  BNC   066E
....................    {    
....................       li = 1; 
05C2:  MOVLW  01
05C4:  MOVWF  3C
....................       re = 128; 
05C6:  MOVLW  80
05C8:  MOVWF  3D
....................       teiler = 2; 
05CA:  MOVLW  02
05CC:  MOVWF  3E
....................       for (I_B = 0; I_B < 8; I_B++) 
05CE:  CLRF   3A
05D0:  MOVF   3A,W
05D2:  SUBLW  07
05D4:  BNC   0624
....................       { 
....................          if (I_B2 == 0) 
05D6:  MOVF   3B,F
05D8:  BNZ   05E6
....................          { 
....................             Portout(li, re); 
05DA:  MOVFF  3C,40
05DE:  MOVFF  3D,41
05E2:  RCALL  030A
....................          } 
....................          else 
05E4:  BRA    05F0
....................          { 
....................             Portout(re, li); 
05E6:  MOVFF  3D,40
05EA:  MOVFF  3C,41
05EE:  RCALL  030A
....................          } 
....................          re = re + re/teiler; 
05F0:  MOVFF  3D,3F
05F4:  MOVFF  3E,40
05F8:  RCALL  041A
05FA:  MOVF   01,W
05FC:  ADDWF  3D,F
....................          li = li*2 + 1; 
05FE:  BCF    FD8.0
0600:  RLCF   3C,W
0602:  ADDLW  01
0604:  MOVWF  3C
....................          teiler = teiler*2 + 2; 
0606:  BCF    FD8.0
0608:  RLCF   3E,W
060A:  ADDLW  02
060C:  MOVWF  3E
060E:  CLRF   19
0610:  BTFSC  FF2.7
0612:  BSF    19.7
0614:  BCF    FF2.7
....................          delay_ms(250); 
0616:  MOVLW  FA
0618:  MOVWF  49
061A:  RCALL  00AE
061C:  BTFSC  19.7
061E:  BSF    FF2.7
....................       } 
0620:  INCF   3A,F
0622:  BRA    05D0
....................       li = 255; 
0624:  MOVLW  FF
0626:  MOVWF  3C
....................       re = 255; 
0628:  MOVWF  3D
....................       for (I_B = 0; I_B < 8; I_B++) 
062A:  CLRF   3A
062C:  MOVF   3A,W
062E:  SUBLW  07
0630:  BNC   066A
....................       { 
....................          if (I_B2 == 0) 
0632:  MOVF   3B,F
0634:  BNZ   0642
....................          { 
....................             Portout(li, re); 
0636:  MOVFF  3C,40
063A:  MOVFF  3D,41
063E:  RCALL  030A
....................          } 
....................          else 
0640:  BRA    064C
....................          { 
....................             Portout(re, li); 
0642:  MOVFF  3D,40
0646:  MOVFF  3C,41
064A:  RCALL  030A
....................          } 
....................          re = (int) re / 2; 
064C:  BCF    FD8.0
064E:  RRCF   3D,F
....................          li = li * 2; 
0650:  BCF    FD8.0
0652:  RLCF   3C,F
0654:  CLRF   19
0656:  BTFSC  FF2.7
0658:  BSF    19.7
065A:  BCF    FF2.7
....................          delay_ms(250); 
065C:  MOVLW  FA
065E:  MOVWF  49
0660:  RCALL  00AE
0662:  BTFSC  19.7
0664:  BSF    FF2.7
....................       } 
0666:  INCF   3A,F
0668:  BRA    062C
....................    } 
066A:  INCF   3B,F
066C:  BRA    05BC
.................... } 
066E:  GOTO   068E (RETURN)
....................  
.................... void LEDTest(int muster){ 
....................    switch(muster){ 
0672:  MOVF   39,W
0674:  XORLW  00
0676:  BZ    0682
0678:  XORLW  01
067A:  BZ    0686
067C:  XORLW  03
067E:  BZ    068A
0680:  BRA    068E
....................    case 0: 
....................       LEDTest6(); // von oben und unten zomgfoan 
0682:  BRA    0442
....................       break; 
0684:  BRA    068E
....................    case 1: 
....................       LEDTest3(); // voll und 3x blinken 
0686:  BRA    051E
....................       break; 
0688:  BRA    068E
....................    case 2: 
....................       LEDTest7();  // von links noch oben, rechts noch unten und umgekehrt    
068A:  BRA    05A8
....................       break; 
068C:  BRA    068E
....................    } 
.................... } 
068E:  GOTO   08A6 (RETURN)
....................  
.................... void checkKeys() 
.................... { 
....................    //      Tasten 
....................    SPIActive = 1; 
*
0138:  MOVLW  01
013A:  MOVWF  23
....................    if((input(Minus_p) == 0) && (input(Plus_p) == 0)){ 
013C:  BTFSC  F81.2
013E:  BRA    0154
0140:  BTFSC  F81.3
0142:  BRA    0154
....................      //Mute 
....................       SendSPI(0x0001); 
0144:  CLRF   46
0146:  MOVLW  01
0148:  MOVWF  45
014A:  RCALL  00D4
....................       SendSPI(0x0000); 
014C:  CLRF   46
014E:  CLRF   45
0150:  RCALL  00D4
....................    } else {  
0152:  BRA    0178
....................       if(input(Minus_p)==0){ 
0154:  BTFSC  F81.2
0156:  BRA    0166
....................        //Leiser 
....................          SendSPI(0x0004); 
0158:  CLRF   46
015A:  MOVLW  04
015C:  MOVWF  45
015E:  RCALL  00D4
....................          SendSPI(0x0000); 
0160:  CLRF   46
0162:  CLRF   45
0164:  RCALL  00D4
....................       } 
....................       if(input(Plus_p)==0){ 
0166:  BTFSC  F81.3
0168:  BRA    0178
....................        //Lauter 
....................          SendSPI(0x0002); 
016A:  CLRF   46
016C:  MOVLW  02
016E:  MOVWF  45
0170:  RCALL  00D4
....................          SendSPI(0x0000); 
0172:  CLRF   46
0174:  CLRF   45
0176:  RCALL  00D4
....................       } 
....................    } 
....................    if((input(Up_p) == 0) && (input(Down_p) == 0)){ 
0178:  BTFSC  F81.5
017A:  BRA    0190
017C:  BTFSC  F81.4
017E:  BRA    0190
....................      //Mute 
....................       SendSPI(0x0040); 
0180:  CLRF   46
0182:  MOVLW  40
0184:  MOVWF  45
0186:  RCALL  00D4
....................       SendSPI(0x0000); 
0188:  CLRF   46
018A:  CLRF   45
018C:  RCALL  00D4
....................    } else {   
018E:  BRA    01B4
....................       if(input(Up_p)==0){ 
0190:  BTFSC  F81.5
0192:  BRA    01A2
....................         //Weiter 
....................          SendSPI(0x0008); 
0194:  CLRF   46
0196:  MOVLW  08
0198:  MOVWF  45
019A:  RCALL  00D4
....................          SendSPI(0x0000); 
019C:  CLRF   46
019E:  CLRF   45
01A0:  RCALL  00D4
....................       } 
....................       if(input(Down_p)==0){ 
01A2:  BTFSC  F81.4
01A4:  BRA    01B4
....................         //Zurück 
....................          SendSPI(0x0010); 
01A6:  CLRF   46
01A8:  MOVLW  10
01AA:  MOVWF  45
01AC:  RCALL  00D4
....................          SendSPI(0x0000); 
01AE:  CLRF   46
01B0:  CLRF   45
01B2:  RCALL  00D4
....................       } 
....................    }    
....................     
....................    SPIActive= 0; 
01B4:  CLRF   23
....................  
.................... } 
01B6:  GOTO   01F8 (RETURN)
....................  
....................  
.................... //                        ** Hauptprogramm ** 
....................  
.................... void main ()  
.................... { 
*
0692:  CLRF   FF8
0694:  BCF    FD0.7
0696:  BSF    07.7
0698:  CLRF   FEA
069A:  CLRF   FE9
069C:  MOVLW  60
069E:  MOVWF  FD3
06A0:  MOVF   FD3,W
06A2:  BCF    1A.0
06A4:  CLRF   1B
06A6:  CLRF   1C
06A8:  CLRF   1D
06AA:  CLRF   1E
06AC:  MOVLW  05
06AE:  MOVWF  1F
06B0:  CLRF   20
06B2:  CLRF   21
06B4:  CLRF   22
06B6:  CLRF   23
06B8:  CLRF   25
06BA:  CLRF   24
06BC:  CLRF   30
06BE:  CLRF   31
06C0:  MOVF   FC1,W
06C2:  ANDLW  F0
06C4:  MOVWF  FC1
06C6:  MOVLW  00
06C8:  MOVLB  F
06CA:  MOVWF  x38
06CC:  MOVLW  00
06CE:  MOVWF  x3C
06D0:  MOVLW  00
06D2:  MOVWF  x39
06D4:  MOVLW  00
06D6:  MOVWF  x3A
06D8:  MOVLW  00
06DA:  MOVWF  x3B
06DC:  CLRF   F78
06DE:  CLRF   F79
06E0:  CLRF   36
06E2:  CLRF   37
06E4:  CLRF   38
....................    int R_B,L_B, R_VU, L_VU, avg_R=0, avg_L=0, LEDMuster=0; 
....................     
....................    coldstart();                        // Grundinitialisierung 
06E6:  MOVLB  0
06E8:  BRA    01FE
....................       enable_interrupts(GLOBAL); 
06EA:  MOVLW  C0
06EC:  IORWF  FF2,F
....................        
....................    set_adc_channel(0); 
06EE:  MOVLW  00
06F0:  MOVWF  01
06F2:  MOVF   FC2,W
06F4:  ANDLW  C3
06F6:  IORWF  01,W
06F8:  MOVWF  FC2
06FA:  CLRF   19
06FC:  BTFSC  FF2.7
06FE:  BSF    19.7
0700:  BCF    FF2.7
....................    delay_ms (1); 
0702:  MOVLW  01
0704:  MOVWF  49
0706:  RCALL  00AE
0708:  BTFSC  19.7
070A:  BSF    FF2.7
....................    avg_L = read_adc(); 
070C:  BSF    FC2.1
070E:  BTFSC  FC2.1
0710:  BRA    070E
0712:  MOVFF  FC3,37
....................     
....................    set_adc_channel(1); 
0716:  MOVLW  04
0718:  MOVWF  01
071A:  MOVF   FC2,W
071C:  ANDLW  C3
071E:  IORWF  01,W
0720:  MOVWF  FC2
0722:  CLRF   19
0724:  BTFSC  FF2.7
0726:  BSF    19.7
0728:  BCF    FF2.7
....................    delay_ms (1); 
072A:  MOVLW  01
072C:  MOVWF  49
072E:  RCALL  00AE
0730:  BTFSC  19.7
0732:  BSF    FF2.7
....................    avg_R = read_adc(); 
0734:  BSF    FC2.1
0736:  BTFSC  FC2.1
0738:  BRA    0736
073A:  MOVFF  FC3,36
....................  
....................  
....................    while (TRUE)                         // Beginn Hauptprogramm 
....................    { 
....................        
....................         //      VU-Meter 
....................       set_adc_channel(0); 
073E:  MOVLW  00
0740:  MOVWF  01
0742:  MOVF   FC2,W
0744:  ANDLW  C3
0746:  IORWF  01,W
0748:  MOVWF  FC2
074A:  CLRF   19
074C:  BTFSC  FF2.7
074E:  BSF    19.7
0750:  BCF    FF2.7
....................       delay_ms (1); 
0752:  MOVLW  01
0754:  MOVWF  49
0756:  RCALL  00AE
0758:  BTFSC  19.7
075A:  BSF    FF2.7
....................       L_VU = read_adc(); 
075C:  BSF    FC2.1
075E:  BTFSC  FC2.1
0760:  BRA    075E
0762:  MOVFF  FC3,35
....................        
....................       set_adc_channel(1); 
0766:  MOVLW  04
0768:  MOVWF  01
076A:  MOVF   FC2,W
076C:  ANDLW  C3
076E:  IORWF  01,W
0770:  MOVWF  FC2
0772:  CLRF   19
0774:  BTFSC  FF2.7
0776:  BSF    19.7
0778:  BCF    FF2.7
....................       delay_ms (1); 
077A:  MOVLW  01
077C:  MOVWF  49
077E:  RCALL  00AE
0780:  BTFSC  19.7
0782:  BSF    FF2.7
....................       R_VU = read_adc(); 
0784:  BSF    FC2.1
0786:  BTFSC  FC2.1
0788:  BRA    0786
078A:  MOVFF  FC3,34
....................        
....................       avg_L = (avg_L + L_VU) /2; 
078E:  MOVF   35,W
0790:  ADDWF  37,W
0792:  MOVWF  00
0794:  BCF    FD8.0
0796:  RRCF   00,W
0798:  MOVWF  37
....................       avg_R = (avg_R + R_VU) /2; 
079A:  MOVF   34,W
079C:  ADDWF  36,W
079E:  MOVWF  00
07A0:  BCF    FD8.0
07A2:  RRCF   00,W
07A4:  MOVWF  36
....................        
....................       if((avg_L + avg_R) >= 3){ 
07A6:  MOVF   36,W
07A8:  ADDWF  37,W
07AA:  SUBLW  02
07AC:  BTFSC  FD8.0
07AE:  BRA    08A0
....................   
....................          //      VU-Meter - Portout 
....................          L_B = Makevu (L_VU); 
07B0:  CLRF   3A
07B2:  MOVFF  35,39
07B6:  RCALL  027C
07B8:  MOVFF  01,33
....................          R_B = Makevu (R_VU); 
07BC:  CLRF   3A
07BE:  MOVFF  34,39
07C2:  RCALL  027C
07C4:  MOVFF  01,32
....................          Portout (L_B,R_B); 
07C8:  MOVFF  33,40
07CC:  MOVFF  32,41
07D0:  RCALL  030A
....................           
....................          //      Bass, mid, treble 
....................             
....................        
....................          set_adc_channel(2); 
07D2:  MOVLW  08
07D4:  MOVWF  01
07D6:  MOVF   FC2,W
07D8:  ANDLW  C3
07DA:  IORWF  01,W
07DC:  MOVWF  FC2
07DE:  CLRF   19
07E0:  BTFSC  FF2.7
07E2:  BSF    19.7
07E4:  BCF    FF2.7
....................          delay_ms (1); 
07E6:  MOVLW  01
07E8:  MOVWF  49
07EA:  RCALL  00AE
07EC:  BTFSC  19.7
07EE:  BSF    FF2.7
....................          if (read_adc() > 560) output_low (Ledb_p); 
07F0:  BSF    FC2.1
07F2:  BTFSC  FC2.1
07F4:  BRA    07F2
07F6:  MOVFF  FC4,03
07FA:  MOVFF  FC3,39
07FE:  MOVF   FC4,W
0800:  MOVWF  3A
0802:  SUBLW  01
0804:  BC    0814
0806:  XORLW  FF
0808:  BNZ   0810
080A:  MOVF   39,W
080C:  SUBLW  30
080E:  BC    0814
0810:  BCF    F8D.0
....................          else output_high (Ledb_p); 
0812:  BRA    0816
0814:  BSF    F8D.0
....................           
....................          set_adc_channel(3); 
0816:  MOVLW  0C
0818:  MOVWF  01
081A:  MOVF   FC2,W
081C:  ANDLW  C3
081E:  IORWF  01,W
0820:  MOVWF  FC2
0822:  CLRF   19
0824:  BTFSC  FF2.7
0826:  BSF    19.7
0828:  BCF    FF2.7
....................          delay_ms (1); 
082A:  MOVLW  01
082C:  MOVWF  49
082E:  RCALL  00AE
0830:  BTFSC  19.7
0832:  BSF    FF2.7
....................          if (read_adc() > 570) output_low (Ledm_p); 
0834:  BSF    FC2.1
0836:  BTFSC  FC2.1
0838:  BRA    0836
083A:  MOVFF  FC4,03
083E:  MOVFF  FC3,39
0842:  MOVF   FC4,W
0844:  MOVWF  3A
0846:  SUBLW  01
0848:  BC    0858
084A:  XORLW  FF
084C:  BNZ   0854
084E:  MOVF   39,W
0850:  SUBLW  3A
0852:  BC    0858
0854:  BCF    F8D.1
....................          else output_high (Ledm_p); 
0856:  BRA    085A
0858:  BSF    F8D.1
....................           
....................          set_adc_channel(4); 
085A:  MOVLW  10
085C:  MOVWF  01
085E:  MOVF   FC2,W
0860:  ANDLW  C3
0862:  IORWF  01,W
0864:  MOVWF  FC2
0866:  CLRF   19
0868:  BTFSC  FF2.7
086A:  BSF    19.7
086C:  BCF    FF2.7
....................          delay_ms (1); 
086E:  MOVLW  01
0870:  MOVWF  49
0872:  RCALL  00AE
0874:  BTFSC  19.7
0876:  BSF    FF2.7
....................          if (read_adc() > 550) output_low (Ledt_p); 
0878:  BSF    FC2.1
087A:  BTFSC  FC2.1
087C:  BRA    087A
087E:  MOVFF  FC4,03
0882:  MOVFF  FC3,39
0886:  MOVF   FC4,W
0888:  MOVWF  3A
088A:  SUBLW  01
088C:  BC    089C
088E:  XORLW  FF
0890:  BNZ   0898
0892:  MOVF   39,W
0894:  SUBLW  26
0896:  BC    089C
0898:  BCF    F8D.2
....................          else output_high (Ledt_p); 
089A:  BRA    089E
089C:  BSF    F8D.2
....................       } 
....................       else { 
089E:  BRA    08B0
....................          LEDTest(LEDMuster); 
08A0:  MOVFF  38,39
08A4:  BRA    0672
....................        if(++LEDMuster == 3){ 
08A6:  INCF   38,F
08A8:  MOVF   38,W
08AA:  SUBLW  03
08AC:  BNZ   08B0
....................           LEDMuster = 0; 
08AE:  CLRF   38
....................        } 
....................       } 
....................    }  
08B0:  BRA    073E
.................... } 
....................  
.................... // Programmende 
08B2:  SLEEP 

Configuration Fuses:
   Word  1: E800   INTRC_IO NOPLLEN PRIMARY_ON FCMEN IESO
   Word  2: 3C18   PUT NOBROWNOUT BORV20 NOWDT WDT32768
   Word  3: 3D00   CCP2C1 NOPBADEN LPT1OSC NODELAYINTOSC TIMER3C0 CCP2D2 NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
